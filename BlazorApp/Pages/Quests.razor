@page "/quests"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<PageTitle>Quests</PageTitle>

@using BlazorApp.Data
@using LOTRShared.Domain
@inject QuestService QuestService

<h1>Quests</h1>

@if (quests == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var quest in quests)
    {
        <QuestComponent Quest="quest" />
    }
}

@code {
    private HubConnection? hubConnection;

    private List<Quest>? quests;

    protected override async Task OnInitializedAsync()
    {
        quests = await QuestService.GetQuestsAsync();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/questhub"))
            .Build();

        hubConnection.On<Guid, string>("ApplyQuestEvent", async (questId, eventContent) =>
        {
            var quest = quests.Find(r => r.Id == questId);
            if (quest == null)
            {
                //we don't have this request on the screen, so load it from the db...(well I guess we could also hydrate it from eventContent?!)
                quests.Add(await QuestService.GetQuestAsync(questId));
            }

            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();

    }

    private bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}
